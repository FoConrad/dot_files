"""" Vimrc of Conrad,
" Note that I take credit for NONE of this, as most was borrowed from
" elsewhere, and I may have missed/forgotten to add citations to each hack.

" General stuff
" Try and catch ssh sessions and avoid those stupid airline symbols (headache)
let g:localSession = 1
" don't beep, use visual bell
set visualbell
set nocompatible
set hidden
set backspace=indent,eol,start
map!  <BS>
" I think this is needed
set t_Co=256

" Help keep clean code
set cc=80
hi ColorColumn ctermbg=24

" Leave at end
filetype indent on
filetype plugin on
filetype plugin indent on

syntax enable
syntax on

" Tpp filetype as CPP file
augroup tpp_ft
    "au!
    autocmd BufNewFile,BufRead *.tpp set filetype=cpp
augroup END

augroup applescript_ft
    au!
    autocmd BufNewFile,BufRead *.osascript,*.applescript set filetype=applescript

augroup aqu
    autocmd BufNewFile,BufRead *.a set filetype=sql
augroup END

" Infect!!!
execute pathogen#infect()
execute pathogen#helptags()

" Handy hack, to retroactively apply sudo to write privileged file
" source (likely not original): https://stackoverflow.com/a/7078429
cmap w!! w !sudo tee > /dev/null %

" Not compiled with +python so why not have :py point to :py3
" FIXME: While useful, this also changes files .py extension to .py3 
"cnoreabbrev py py3

" Command history
autocmd CmdwinEnter * nnoremap <buffer> <F5> <CR>q:

" This is soo necessary with my touch-bar mac
inoremap kj <Esc>

" Deal with ugly vertical split
set fillchars+=vert:\ 
hi VertSplit ctermfg=236 ctermbg=236 

set background=dark
" Using terminal solarized scheme, much easier
"let g:solarized_termcolors=256
"colorscheme solarized

" Essential shift width, and soft tabs
set shiftwidth=4
set softtabstop=4
set expandtab

" LIST: 
"   - Removing "cro" formatting options prevents  the automatic insertion
"       of the comment lead when editing a new line under an existing
"       comment.
"   - Format option 'j' removes comment lead when joining lines with J (for
"       other options please refer the pansophical help screens @ fo-table
"au FileType * set fo-=cro
au FileType * set fo=qlcroj

" And the width at which to break comment lines 
let &textwidth=&colorcolumn-1

set nospell
set modeline

" NOTE: In case 'set spell' is used but the colors are illegible (may need to
" change the specific colors)
"hi SpellBad term=bold cterm=bold ctermfg=124 guifg=Red

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

" Pretty neat function to tell you the syntax rule for highlighting the word
" under your cursor
nnoremap <f10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Mighty leader key!
let mapleader="\<Space>"

" Delete surrounding parenthesis
nnoremap <leader>( F(ma%x`ax
xnoremap <leader>" xi""<esc>P
xnoremap <leader>' xi''<esc>P

" Do python style impoirt for current word
" TODO: What if no 'import' is present yet? Support other langs
nnoremap <leader>I mX/\><cr>bywgg/^import<cr>Oimport <esc>p'X

" TODO: Get it to print current filename
"nnoremap <leader>o <esc>:vnew \| r ! git show master:expand("%:t")
nnoremap <leader>o <esc>:vnew \| r ! git show master:

" Turn on highlight and search
hi Search ctermbg=LightBlue
command! -nargs=* HighListSearch call HighListSearch(<q-args>)
function! HighListSearch(pat)
    if strlen(a:pat) == 0
        set nohlsearch
    else
        let @/='\v' . a:pat
        normal n
    endif
endfunction
nnoremap <leader>H <esc>:set hlsearch<cr>:HighListSearch 


" Commands. functions, and bindings (oh my!) to compare current file with that
" on another git branch.
command! -nargs=* ReadBranchFile call ReadBranchFile(<f-args>)
function! ReadBranchFile(branch, file, type)
    let l:gc = 'git show ' . a:branch . ':' . a:file
    enew|pu=system(l:gc)
    execute 'set filetype=' . a:type
endfunction
nnoremap <leader>g <esc>:ReadBranchFile 
" -> Guided prompt
"nnoremap <leader>G <esc>:call ReadBranchFile(\
"       input('branch: '), input('file: '), input('type: '))<cr>

command! -nargs=* AutoReadBranchFile call AutoReadBranchFile(<q-args>)
function! AutoReadBranchFile(branch)
    execute 'vsplit'
    execute 'wincmd p'
    call ReadBranchFile(a:branch, expand('%'), &ft)
endfunction
nnoremap <leader>G <esc>:AutoReadBranchFile 


" Function to wrap arguments in quotes
command! -nargs=1 CWrapn call CommentWrap(0, <q-args>)
nnoremap  <leader>w <esc>:CWrapn 

command! -nargs=1 CWrapp call CommentWrap(1, <q-args>)
nnoremap  <leader>W <esc>:CWrapp 

function! CommentWrap(above, commentStr)
    let commentChr=substitute(split(&commentstring, '%s')[0], ' \+$', '', '')
    let firstHalf=(&tw - strlen(a:commentStr) - 2)/2
    let secondHalf=&tw - strlen(a:commentStr) - 2 - l:firstHalf
    let headerLine=repeat(l:commentChr, l:firstHalf) . ' ' . a:commentStr  .  ' ' . repeat(l:commentChr,l:secondHalf)
    if a:above
        put! =l:headerLine
    else
        put =l:headerLine
    endif
endfunction


" Buffer moving
nnoremap <Leader>q <ESC>:wqa<CR>
nnoremap <Leader>a <ESC>:bprev<CR>
nnoremap <Leader>d <ESC>:bnext<CR>
nnoremap <Leader>1 <ESC>:b1<CR>
nnoremap <Leader>2 <ESC>:b2<CR>
nnoremap <Leader>3 <ESC>:b3<CR>
nnoremap <Leader>4 <ESC>:b4<CR>
nnoremap <Leader>5 <ESC>:b5<CR>
nnoremap <Leader>6 <ESC>:b6<CR>
nnoremap <Leader>7 <ESC>:b7<CR>
nnoremap <Leader>8 <ESC>:b8<CR>
nnoremap <Leader>9 <ESC>:b9<CR>

nnoremap <leader>v <esc>:read ! xclip -selection clipboard -o<cr>

function! MakeSessionInput()
    let l:sess_name = input('Session name: ')
    :NERDTreeClose
    execute "mksession"  l:sess_name .'.vim'
    :qa
endfunction
nnoremap <leader>s <esc>:call MakeSessionInput()<cr>

" Trailing whitespace. This could be bound to a less accessible keybinding as
" it does not get run too often...
nnoremap <leader>t <esc>:%s/ \+$//<cr>


nnoremap <leader>y <esc>:call CurtineIncSw()<cr>


nnoremap <leader>n <esc>:NERDTreeFocus<cr>
" This is super useful. If NERDTree is the last pane open, then quit
" Taken from https://github.com/scrooloose/nerdtree/issues/635
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeIgnore = ['\.pyc$', '\.o$', '\.d$']

" Window resizing
"""" see resize.vim, this is for resizing vim windows quickly
let g:vim_resize_disable_auto_mappings = 1
nnoremap <Leader>h <esc>:CmdResizeLeft<cr>
nnoremap <Leader>j <esc>:CmdResizeDown<cr>
nnoremap <Leader>k <esc>:CmdResizeUp<cr>
nnoremap <Leader>l <esc>:CmdResizeRight<cr>

" Moving around windows painlessly
map <c-h> <esc><c-w>h
map <c-j> <esc><c-w>j
map <c-k> <esc><c-w>k
map <c-l> <esc><c-w>l

" Leader paste mode
nnoremap <leader>p :set invpaste<CR> 

" Insert single character, type: ,s<char>
nmap <silent> ,s "=nr2char(getchar())<cr>P

" Case insensitive search
nnoremap <leader>/ /\c 
nnoremap <leader>? ?\c 

" Order of tab completion, this is similar to bash
set wildmode=longest,list,full
set wildmenu
" Ignore certain filetypes for tab completion
set wildignore+=*.pdf,*.o,*.obj,*.jpg,*.png,*.class

" Must have relative absolute/relative line numbers
set number
set relativenumber

" Latex stuff
autocmd FileType tex map <f5> <esc>bdwi\begin{<esc>pa}<esc>o\end{<esc>pa}<esc>O
autocmd FileType tex imap <f5> <esc>bdwi\begin{<esc>pa}<esc>o\end{<esc>pa}<esc>O

let g:SuperTabClosePreviewOnPopupClose = 1

" TODO: Figure this shit out
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Avoid full path of file name in section C (middle bottom)
let g:airline_section_c = '%t'



" FIXME: Changed for iTerm
if g:localSession
    " solarized dark: luna
    let g:airline_theme ='cobalt2'
    let g:airline_symbols = {}
    let g:airline_powerline_fonts = 1
    let g:airline_left_sep = '»'
    "let g:airline_left_sep = '▶'
    "let g:airline_right_sep = '«'
    "let g:airline_right_sep = '◀'
    "let g:airline_symbols.linenr = '¶'
    "let g:airline_symbols.maxlinenr = ''
    "let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.paste = 'Þ'
    let g:airline_symbols.spell = 'Ꞩ'
    let g:airline_symbols.notexists = '∄'
    let g:airline_symbols.whitespace = 'Ξ'

    "" powerline symbols
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = '☰'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.dirty='⚡'
endif

" Go stuff
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_methods = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_operators = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_fields = 1
let g:go_highlight_structs = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_functions = 1
let g:go_highlight_types = 1
let g:go_highlight_generate_tags = 1

"let g:go_fmt_command = 0
"let g:go_fmt_autosave = 0
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

" fg and bg were the same in quickfix
"hi Search ctermbg=7
" Python colors all fucked up, here is fix, hack
"hi pythonStatement ctermfg=2
"hi pythonFunction ctermfg=4
"hi pythonComment ctermfg=LightGreen
"hi pythonExceptions ctermfg=9
"hi pythonException ctermfg=DarkMagenta
"hi Normal ctermfg=LightBlue

autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>eo :GoMetaLinter<cr>
autocmd FileType go nmap <leader>ec :cclose<cr>
autocmd FileType go nmap <leader>en :cnext<cr>
autocmd FileType go nmap <leader>ep :cprevious<cr>

" TODO: Test and customize
" Taken from http://vim.wikia.com/wiki/Swap_file_%22...%22already_exists!_-_so_diff_it
command! DiffAgainstFileOnDisk call DiffAgainstFileOnDisk()
function! DiffAgainstFileOnDisk()
  :w! /tmp/working_copy
  exec "!diff /tmp/working_copy %"
endfunction

" Taken from http://vim.1045645.n5.nabble.com/Re-how-to-suppress-quot-E173-1-more-file-to-edit-quot-td5716336.html
" Avoid E173, caused when opening multiple files from the command line, but one
" or more remained un-edited.
if argc() > 1
  silent blast " load last buffer
  silent bfirst " switch back to the first
endif

" Temp settings for DBx1000 code
autocmd BufRead,BufNewFile /home/con/workspace/grad/research/rlcc/DBx1000-Mix/*.cpp setlocal ts=4 noexpandtab
autocmd BufRead,BufNewFile /home/con/workspace/grad/research/rlcc/DBx1000-Mix/*.h setlocal ts=4 noexpandtab

nnoremap <leader>N <esc>:NERDTreeFocus<cr>/
function! NerdEntrRebind()
    let l:s = NERDTreeGetSID()
    echom l:s
    normal <cr>
endfunction
autocmd VimEnter * call NERDTreeAddKeyMap({ 'key': '<leader><cr>', 'scope': 'all', 'callback': 'NerdEntrRebind' })

" Racket / Scheme stuff
au BufReadPost *.scm set filetype=racket
augroup racket_ft
    au!
    autocmd Syntax racket syntax match keyword "\<lambda\>" conceal cchar=λ
    set conceallevel=1
    "autocmd InsertEnter <buffer> setlocal conceallevel=0 | highlight clear Ignore
    "autocmd InsertLeave <buffer> setlocal conceallevel=2
augroup end
